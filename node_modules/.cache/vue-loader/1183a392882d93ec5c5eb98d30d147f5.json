{"remainingRequest":"/home/sergey/projects/whatbayGH/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/sergey/projects/whatbayGH/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/sergey/projects/whatbayGH/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/sergey/projects/whatbayGH/src/views/Register.vue?vue&type=template&id=63ae9146&","dependencies":[{"path":"/home/sergey/projects/whatbayGH/src/views/Register.vue","mtime":1642522924802},{"path":"/home/sergey/projects/whatbayGH/node_modules/cache-loader/dist/cjs.js","mtime":1643348323584},{"path":"/home/sergey/projects/whatbayGH/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1643348325976},{"path":"/home/sergey/projects/whatbayGH/node_modules/cache-loader/dist/cjs.js","mtime":1643348323584},{"path":"/home/sergey/projects/whatbayGH/node_modules/vue-loader/lib/index.js","mtime":1643348325232}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHsKICB2YXIgX3ZtID0gdGhpcwogIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogIHJldHVybiBfYygiZGl2IiwgWwogICAgX3ZtLl9tKDApLAogICAgX2MoCiAgICAgICJmb3JtIiwKICAgICAgewogICAgICAgIHN0YXRpY0NsYXNzOiAiZm9ybSIsCiAgICAgICAgYXR0cnM6IHsgYWN0aW9uOiAiIyIsIG1ldGhvZDogInBvc3QiIH0sCiAgICAgICAgb246IHsKICAgICAgICAgIHN1Ym1pdDogZnVuY3Rpb24gKCRldmVudCkgewogICAgICAgICAgICAkZXZlbnQucHJldmVudERlZmF1bHQoKQogICAgICAgICAgICByZXR1cm4gX3ZtLnN1Ym1pdEhhbmRsZXIuYXBwbHkobnVsbCwgYXJndW1lbnRzKQogICAgICAgICAgfSwKICAgICAgICB9LAogICAgICB9LAogICAgICBbCiAgICAgICAgX2MoCiAgICAgICAgICAibGFiZWwiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImZvcm0tbGFiZWwiLCBhdHRyczogeyBmb3I6ICJ1c2VyX2VtYWlsIiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIg0JLQstC10LTQuNGC0LUg0LLQsNGIIGUtbWFpbCAiKV0KICAgICAgICApLAogICAgICAgIF92bS4kdi5lbWFpbC4kZGlydHkgJiYgIV92bS4kdi5lbWFpbC5yZXF1aXJlZAogICAgICAgICAgPyBfYygic21hbGwiLCB7IHN0YXRpY0NsYXNzOiAiaW52YWxpZCBlcnJfaW5mbyIgfSwgWwogICAgICAgICAgICAgIF92bS5fdigiINCf0L7Qu9C1IGUtbWFpbCDQvdC1INC00L7Qu9C20L3QviDQsdGL0YLRjCDQv9GD0YHRgtGL0LwgIiksCiAgICAgICAgICAgIF0pCiAgICAgICAgICA6IF92bS4kdi5lbWFpbC4kZGlydHkgJiYgIV92bS4kdi5lbWFpbC5lbWFpbAogICAgICAgICAgPyBfYygic21hbGwiLCB7IHN0YXRpY0NsYXNzOiAiaW52YWxpZCBlcnJfaW5mbyIgfSwgWwogICAgICAgICAgICAgIF92bS5fdigiIGUtbWFpbCDQtNC+0LvQttC10L0g0LLRi9Cz0LvRj9C00LXRgtGMINC/0YDQuNC80LXRgDogZXhhbXBsZUBnbWFpbC5jb20gIiksCiAgICAgICAgICAgIF0pCiAgICAgICAgICA6IF92bS5fZSgpLAogICAgICAgIF9jKCJpbnB1dCIsIHsKICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgIG5hbWU6ICJtb2RlbCIsCiAgICAgICAgICAgICAgcmF3TmFtZTogInYtbW9kZWwudHJpbSIsCiAgICAgICAgICAgICAgdmFsdWU6IF92bS5lbWFpbCwKICAgICAgICAgICAgICBleHByZXNzaW9uOiAiZW1haWwiLAogICAgICAgICAgICAgIG1vZGlmaWVyczogeyB0cmltOiB0cnVlIH0sCiAgICAgICAgICAgIH0sCiAgICAgICAgICBdLAogICAgICAgICAgc3RhdGljQ2xhc3M6ICJmb3JtLWlucHV0IiwKICAgICAgICAgIGNsYXNzOiB7CiAgICAgICAgICAgIGludmFsaWQ6CiAgICAgICAgICAgICAgKF92bS4kdi5lbWFpbC4kZGlydHkgJiYgIV92bS4kdi5lbWFpbC5yZXF1aXJlZCkgfHwKICAgICAgICAgICAgICAoX3ZtLiR2LmVtYWlsLiRkaXJ0eSAmJiAhX3ZtLiR2LmVtYWlsLmVtYWlsKSwKICAgICAgICAgIH0sCiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICB0eXBlOiAiZW1haWwiLAogICAgICAgICAgICBwbGFjZWhvbGRlcjogImZvcl9leGFtcGxlQGdtYWlsLmNvbSIsCiAgICAgICAgICAgIGlkOiAidXNlcl9lbWFpbCIsCiAgICAgICAgICB9LAogICAgICAgICAgZG9tUHJvcHM6IHsgdmFsdWU6IF92bS5lbWFpbCB9LAogICAgICAgICAgb246IHsKICAgICAgICAgICAgaW5wdXQ6IGZ1bmN0aW9uICgkZXZlbnQpIHsKICAgICAgICAgICAgICBpZiAoJGV2ZW50LnRhcmdldC5jb21wb3NpbmcpIHsKICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBfdm0uZW1haWwgPSAkZXZlbnQudGFyZ2V0LnZhbHVlLnRyaW0oKQogICAgICAgICAgICB9LAogICAgICAgICAgICBibHVyOiBmdW5jdGlvbiAoJGV2ZW50KSB7CiAgICAgICAgICAgICAgcmV0dXJuIF92bS4kZm9yY2VVcGRhdGUoKQogICAgICAgICAgICB9LAogICAgICAgICAgfSwKICAgICAgICB9KSwKICAgICAgICBfYygKICAgICAgICAgICJsYWJlbCIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiZm9ybS1sYWJlbCIsIGF0dHJzOiB7IGZvcjogInVzZXJfbmFtZSIgfSB9LAogICAgICAgICAgW192bS5fdigiINCS0LLQtdC00LjRgtC1INCy0LDRiCBsb2dpbiAiKV0KICAgICAgICApLAogICAgICAgIChfdm0uJHYudXNlcl9uYW1lLiRkaXJ0eSAmJiAhX3ZtLiR2LnVzZXJfbmFtZS5yZXF1aXJlZCkgfHwKICAgICAgICAoX3ZtLiR2LnVzZXJfbmFtZS4kZGlydHkgJiYgIV92bS4kdi51c2VyX25hbWUubWluTGVuZ3RoKQogICAgICAgICAgPyBfYygic21hbGwiLCB7IHN0YXRpY0NsYXNzOiAiaW52YWxpZCBlcnJfaW5mbyIgfSwgWwogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICIg0J/QvtC70LUg0LjQvNGPINC90LUg0LTQvtC70LbQvdC+INCx0YvRgtGMINC/0YPRgdGC0YvQvCwg0Lgg0YHQvtC00LXRgNC20LDRgtGMINC90LUg0LzQtdC90LXQtSAiICsKICAgICAgICAgICAgICAgICAgX3ZtLl9zKF92bS4kdi51c2VyX25hbWUuJHBhcmFtcy5taW5MZW5ndGgubWluKSArCiAgICAgICAgICAgICAgICAgICIg0YHQuNC80LLQvtC70L7Qsi4gIgogICAgICAgICAgICAgICksCiAgICAgICAgICAgIF0pCiAgICAgICAgICA6IF92bS5fZSgpLAogICAgICAgIF9jKCJpbnB1dCIsIHsKICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgIG5hbWU6ICJtb2RlbCIsCiAgICAgICAgICAgICAgcmF3TmFtZTogInYtbW9kZWwudHJpbSIsCiAgICAgICAgICAgICAgdmFsdWU6IF92bS51c2VyX25hbWUsCiAgICAgICAgICAgICAgZXhwcmVzc2lvbjogInVzZXJfbmFtZSIsCiAgICAgICAgICAgICAgbW9kaWZpZXJzOiB7IHRyaW06IHRydWUgfSwKICAgICAgICAgICAgfSwKICAgICAgICAgIF0sCiAgICAgICAgICBzdGF0aWNDbGFzczogImZvcm0taW5wdXQiLAogICAgICAgICAgY2xhc3M6IHsKICAgICAgICAgICAgaW52YWxpZDoKICAgICAgICAgICAgICAoX3ZtLiR2LnVzZXJfbmFtZS4kZGlydHkgJiYgIV92bS4kdi51c2VyX25hbWUucmVxdWlyZWQpIHx8CiAgICAgICAgICAgICAgKF92bS4kdi51c2VyX25hbWUuJGRpcnR5ICYmICFfdm0uJHYudXNlcl9uYW1lLm1pbkxlbmd0aCksCiAgICAgICAgICB9LAogICAgICAgICAgYXR0cnM6IHsgdHlwZTogInRleHQiLCBwbGFjZWhvbGRlcjogIk5hbWUiLCBpZDogInVzZXJfbmFtZSIgfSwKICAgICAgICAgIGRvbVByb3BzOiB7IHZhbHVlOiBfdm0udXNlcl9uYW1lIH0sCiAgICAgICAgICBvbjogewogICAgICAgICAgICBpbnB1dDogZnVuY3Rpb24gKCRldmVudCkgewogICAgICAgICAgICAgIGlmICgkZXZlbnQudGFyZ2V0LmNvbXBvc2luZykgewogICAgICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF92bS51c2VyX25hbWUgPSAkZXZlbnQudGFyZ2V0LnZhbHVlLnRyaW0oKQogICAgICAgICAgICB9LAogICAgICAgICAgICBibHVyOiBmdW5jdGlvbiAoJGV2ZW50KSB7CiAgICAgICAgICAgICAgcmV0dXJuIF92bS4kZm9yY2VVcGRhdGUoKQogICAgICAgICAgICB9LAogICAgICAgICAgfSwKICAgICAgICB9KSwKICAgICAgICBfYygKICAgICAgICAgICJsYWJlbCIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiZm9ybS1sYWJlbCIsIGF0dHJzOiB7IGZvcjogImZpcnN0bmFtZSIgfSB9LAogICAgICAgICAgW192bS5fdigiINCS0LLQtdC00LjRgtC1INCy0LDRiNC1INC40LzRjyAiKV0KICAgICAgICApLAogICAgICAgIChfdm0uJHYuZmlyc3RuYW1lLiRkaXJ0eSAmJiAhX3ZtLiR2LmZpcnN0bmFtZS5yZXF1aXJlZCkgfHwKICAgICAgICAoX3ZtLiR2LmZpcnN0bmFtZS4kZGlydHkgJiYgIV92bS4kdi5maXJzdG5hbWUubWluTGVuZ3RoKQogICAgICAgICAgPyBfYygic21hbGwiLCB7IHN0YXRpY0NsYXNzOiAiaW52YWxpZCBlcnJfaW5mbyIgfSwgWwogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICIg0J/QvtC70LUg0LjQvNGPINC90LUg0LTQvtC70LbQvdC+INCx0YvRgtGMINC/0YPRgdGC0YvQvCwg0Lgg0YHQvtC00LXRgNC20LDRgtGMINC90LUg0LzQtdC90LXQtSAiICsKICAgICAgICAgICAgICAgICAgX3ZtLl9zKF92bS4kdi5maXJzdG5hbWUuJHBhcmFtcy5taW5MZW5ndGgubWluKSArCiAgICAgICAgICAgICAgICAgICIg0YHQuNC80LLQvtC70L7Qsi4gIgogICAgICAgICAgICAgICksCiAgICAgICAgICAgIF0pCiAgICAgICAgICA6IF92bS5fZSgpLAogICAgICAgIF9jKCJpbnB1dCIsIHsKICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgIG5hbWU6ICJtb2RlbCIsCiAgICAgICAgICAgICAgcmF3TmFtZTogInYtbW9kZWwudHJpbSIsCiAgICAgICAgICAgICAgdmFsdWU6IF92bS5maXJzdG5hbWUsCiAgICAgICAgICAgICAgZXhwcmVzc2lvbjogImZpcnN0bmFtZSIsCiAgICAgICAgICAgICAgbW9kaWZpZXJzOiB7IHRyaW06IHRydWUgfSwKICAgICAgICAgICAgfSwKICAgICAgICAgIF0sCiAgICAgICAgICBzdGF0aWNDbGFzczogImZvcm0taW5wdXQiLAogICAgICAgICAgY2xhc3M6IHsKICAgICAgICAgICAgaW52YWxpZDoKICAgICAgICAgICAgICAoX3ZtLiR2LmZpcnN0bmFtZS4kZGlydHkgJiYgIV92bS4kdi5maXJzdG5hbWUucmVxdWlyZWQpIHx8CiAgICAgICAgICAgICAgKF92bS4kdi5maXJzdG5hbWUuJGRpcnR5ICYmICFfdm0uJHYuZmlyc3RuYW1lLm1pbkxlbmd0aCksCiAgICAgICAgICB9LAogICAgICAgICAgYXR0cnM6IHsgdHlwZTogInRleHQiLCBwbGFjZWhvbGRlcjogImZpcnN0bmFtZSIsIGlkOiAiZmlyc3RuYW1lIiB9LAogICAgICAgICAgZG9tUHJvcHM6IHsgdmFsdWU6IF92bS5maXJzdG5hbWUgfSwKICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgIGlucHV0OiBmdW5jdGlvbiAoJGV2ZW50KSB7CiAgICAgICAgICAgICAgaWYgKCRldmVudC50YXJnZXQuY29tcG9zaW5nKSB7CiAgICAgICAgICAgICAgICByZXR1cm4KICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgX3ZtLmZpcnN0bmFtZSA9ICRldmVudC50YXJnZXQudmFsdWUudHJpbSgpCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGJsdXI6IGZ1bmN0aW9uICgkZXZlbnQpIHsKICAgICAgICAgICAgICByZXR1cm4gX3ZtLiRmb3JjZVVwZGF0ZSgpCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9LAogICAgICAgIH0pLAogICAgICAgIF9jKCJsYWJlbCIsIHsgc3RhdGljQ2xhc3M6ICJmb3JtLWxhYmVsIiwgYXR0cnM6IHsgZm9yOiAibGFzdG5hbWUiIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCIg0JLQstC10LTQuNGC0LUg0LLQsNGIIGxhc3RuYW1lICIpLAogICAgICAgIF0pLAogICAgICAgIChfdm0uJHYubGFzdG5hbWUuJGRpcnR5ICYmICFfdm0uJHYubGFzdG5hbWUucmVxdWlyZWQpIHx8CiAgICAgICAgKF92bS4kdi5sYXN0bmFtZS4kZGlydHkgJiYgIV92bS4kdi5sYXN0bmFtZS5taW5MZW5ndGgpCiAgICAgICAgICA/IF9jKCJzbWFsbCIsIHsgc3RhdGljQ2xhc3M6ICJpbnZhbGlkIGVycl9pbmZvIiB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIiDQn9C+0LvQtSDQuNC80Y8g0L3QtSDQtNC+0LvQttC90L4g0LHRi9GC0Ywg0L/Rg9GB0YLRi9C8LCDQuCDRgdC+0LTQtdGA0LbQsNGC0Ywg0L3QtSDQvNC10L3QtdC1ICIgKwogICAgICAgICAgICAgICAgICBfdm0uX3MoX3ZtLiR2Lmxhc3RuYW1lLiRwYXJhbXMubWluTGVuZ3RoLm1pbikgKwogICAgICAgICAgICAgICAgICAiINGB0LjQvNCy0L7Qu9C+0LIuICIKICAgICAgICAgICAgICApLAogICAgICAgICAgICBdKQogICAgICAgICAgOiBfdm0uX2UoKSwKICAgICAgICBfYygiaW5wdXQiLCB7CiAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBuYW1lOiAibW9kZWwiLAogICAgICAgICAgICAgIHJhd05hbWU6ICJ2LW1vZGVsLnRyaW0iLAogICAgICAgICAgICAgIHZhbHVlOiBfdm0ubGFzdG5hbWUsCiAgICAgICAgICAgICAgZXhwcmVzc2lvbjogImxhc3RuYW1lIiwKICAgICAgICAgICAgICBtb2RpZmllcnM6IHsgdHJpbTogdHJ1ZSB9LAogICAgICAgICAgICB9LAogICAgICAgICAgXSwKICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZm9ybS1pbnB1dCIsCiAgICAgICAgICBjbGFzczogewogICAgICAgICAgICBpbnZhbGlkOgogICAgICAgICAgICAgIChfdm0uJHYubGFzdG5hbWUuJGRpcnR5ICYmICFfdm0uJHYubGFzdG5hbWUucmVxdWlyZWQpIHx8CiAgICAgICAgICAgICAgKF92bS4kdi5sYXN0bmFtZS4kZGlydHkgJiYgIV92bS4kdi5sYXN0bmFtZS5taW5MZW5ndGgpLAogICAgICAgICAgfSwKICAgICAgICAgIGF0dHJzOiB7IHR5cGU6ICJ0ZXh0IiwgcGxhY2Vob2xkZXI6ICJsYXN0bmFtZSIsIGlkOiAibGFzdG5hbWUiIH0sCiAgICAgICAgICBkb21Qcm9wczogeyB2YWx1ZTogX3ZtLmxhc3RuYW1lIH0sCiAgICAgICAgICBvbjogewogICAgICAgICAgICBpbnB1dDogZnVuY3Rpb24gKCRldmVudCkgewogICAgICAgICAgICAgIGlmICgkZXZlbnQudGFyZ2V0LmNvbXBvc2luZykgewogICAgICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF92bS5sYXN0bmFtZSA9ICRldmVudC50YXJnZXQudmFsdWUudHJpbSgpCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGJsdXI6IGZ1bmN0aW9uICgkZXZlbnQpIHsKICAgICAgICAgICAgICByZXR1cm4gX3ZtLiRmb3JjZVVwZGF0ZSgpCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9LAogICAgICAgIH0pLAogICAgICAgIF9jKAogICAgICAgICAgImxhYmVsIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJmb3JtLWxhYmVsIiwgYXR0cnM6IHsgZm9yOiAidXNlcl9wYXNzd29yZCIgfSB9LAogICAgICAgICAgWwogICAgICAgICAgICBfdm0uX3YoIiDQo9GB0YLQsNC90L7QstC40YLQtSDQv9Cw0YDQvtC70YwgIiksCiAgICAgICAgICAgIF92bS4kdi5wYXNzd29yZC4kZGlydHkgJiYgIV92bS4kdi5wYXNzd29yZC5yZXF1aXJlZAogICAgICAgICAgICAgID8gX2MoInNtYWxsIiwgeyBzdGF0aWNDbGFzczogImludmFsaWQgZXJyX2luZm8iIH0sIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KCIg0J/QvtC70LUg0L/QsNGA0L7Qu9GMINC90LUg0LTQvtC70LbQvdC+INCx0YvRgtGMINC/0YPRgdGC0YvQvCAiKSwKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgOiBfdm0uX2UoKSwKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ3cmFwcGVyLWlucHV0IiB9LCBbCiAgICAgICAgICAgICAgX2MoImlucHV0IiwgewogICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgbmFtZTogIm1vZGVsIiwKICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1tb2RlbC50cmltIiwKICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLnBhc3N3b3JkLAogICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJwYXNzd29yZCIsCiAgICAgICAgICAgICAgICAgICAgbW9kaWZpZXJzOiB7IHRyaW06IHRydWUgfSwKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImZvcm0taW5wdXQgZm9ybS1mb250LXBhc3N3b3JkIiwKICAgICAgICAgICAgICAgIGNsYXNzOiB7CiAgICAgICAgICAgICAgICAgIGludmFsaWQ6CiAgICAgICAgICAgICAgICAgICAgKF92bS4kdi5wYXNzd29yZC4kZGlydHkgJiYgIV92bS4kdi5wYXNzd29yZC5yZXF1aXJlZCkgfHwKICAgICAgICAgICAgICAgICAgICAoX3ZtLiR2LnBhc3N3b3JkLiRkaXJ0eSAmJiAhX3ZtLiR2LnBhc3N3b3JkLm1pbkxlbmd0aCksCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgYXR0cnM6IHsgdHlwZTogInBhc3N3b3JkIiwgaWQ6ICJ1c2VyX3Bhc3N3b3JkIiB9LAogICAgICAgICAgICAgICAgZG9tUHJvcHM6IHsgdmFsdWU6IF92bS5wYXNzd29yZCB9LAogICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgaW5wdXQ6IGZ1bmN0aW9uICgkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoJGV2ZW50LnRhcmdldC5jb21wb3NpbmcpIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBfdm0ucGFzc3dvcmQgPSAkZXZlbnQudGFyZ2V0LnZhbHVlLnRyaW0oKQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBibHVyOiBmdW5jdGlvbiAoJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS4kZm9yY2VVcGRhdGUoKQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJkaXNwbGF5LXBhc3N3b3JkLXBpYyIsCiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4uL2Fzc2V0cy9pbWcvZXllLnN2ZyIpLAogICAgICAgICAgICAgICAgICBhbHQ6ICJkaXNwbGF5IiwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24gKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0uc2hvd19oaWRlX3Bhc3N3b3JkKCJ1c2VyX3Bhc3N3b3JkIikKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uJHYucGFzc3dvcmQuJGRpcnR5ICYmICFfdm0uJHYucGFzc3dvcmQubWluTGVuZ3RoCiAgICAgICAgICAgICAgPyBfYygic21hbGwiLCB7IHN0YXRpY0NsYXNzOiAiZXJyX2luZm8iIH0sIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICIg0J/QsNGA0L7Qu9GMINC90LUg0LzQtdC90LXQtSAiICsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fcyhfdm0uJHYucGFzc3dvcmQuJHBhcmFtcy5taW5MZW5ndGgubWluKSArCiAgICAgICAgICAgICAgICAgICAgICAiINGB0LjQvNCy0L7Qu9C+0LIsINGB0LXQudGH0LDRgSAiICsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fcyhfdm0ucGFzc3dvcmQubGVuZ3RoKSArCiAgICAgICAgICAgICAgICAgICAgICAiICIKICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgOiBfdm0uX2UoKSwKICAgICAgICAgIF0KICAgICAgICApLAogICAgICAgIF9jKCJiciIpLAogICAgICAgIF9jKAogICAgICAgICAgImxhYmVsIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJmb3JtLWxhYmVsIiwgYXR0cnM6IHsgZm9yOiAidXNlcl9wYXNzd29yZF9yZXBlYXQiIH0gfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX3ZtLl92KCIg0J/QvtCy0YLQvtGA0LjRgtC1INC/0LDRgNC+0LvRjCAiKSwKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ3cmFwcGVyLWlucHV0IiB9LCBbCiAgICAgICAgICAgICAgX2MoImlucHV0IiwgewogICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgbmFtZTogIm1vZGVsIiwKICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1tb2RlbC50cmltIiwKICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLnJlcGVhdFBhc3N3b3JkLAogICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJyZXBlYXRQYXNzd29yZCIsCiAgICAgICAgICAgICAgICAgICAgbW9kaWZpZXJzOiB7IHRyaW06IHRydWUgfSwKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImZvcm0taW5wdXQgZm9ybS1mb250LXBhc3N3b3JkIiwKICAgICAgICAgICAgICAgIGNsYXNzOiB7CiAgICAgICAgICAgICAgICAgIGludmFsaWQ6CiAgICAgICAgICAgICAgICAgICAgX3ZtLiR2LnJlcGVhdFBhc3N3b3JkLiRkaXJ0eSAmJgogICAgICAgICAgICAgICAgICAgICFfdm0uJHYucmVwZWF0UGFzc3dvcmQucmVxdWlyZWQsCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgYXR0cnM6IHsgdHlwZTogInBhc3N3b3JkIiwgaWQ6ICJ1c2VyX3Bhc3N3b3JkX3JlcGVhdCIgfSwKICAgICAgICAgICAgICAgIGRvbVByb3BzOiB7IHZhbHVlOiBfdm0ucmVwZWF0UGFzc3dvcmQgfSwKICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgIGlucHV0OiBmdW5jdGlvbiAoJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCRldmVudC50YXJnZXQuY29tcG9zaW5nKSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgX3ZtLnJlcGVhdFBhc3N3b3JkID0gJGV2ZW50LnRhcmdldC52YWx1ZS50cmltKCkKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgYmx1cjogZnVuY3Rpb24gKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0uJGZvcmNlVXBkYXRlKCkKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZGlzcGxheS1wYXNzd29yZC1waWMiLAogICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCIuLi9hc3NldHMvaW1nL2V5ZS5zdmciKSwKICAgICAgICAgICAgICAgICAgYWx0OiAiZGlzcGxheSIsCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uICgkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLnNob3dfaGlkZV9wYXNzd29yZCgidXNlcl9wYXNzd29yZF9yZXBlYXQiKQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgXSksCiAgICAgICAgICAgICFfdm0uJHYucmVwZWF0UGFzc3dvcmQuc2FtZUFzUGFzc3dvcmQKICAgICAgICAgICAgICA/IF9jKCJzbWFsbCIsIHsgc3RhdGljQ2xhc3M6ICJlcnJfaW5mbyIgfSwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoIiDQn9Cw0YDQvtC70Lgg0LTQvtC70LbQvdGLINGB0L7QstC/0LDQtNCw0YLRjCAiKSwKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgOiBfdm0uX2UoKSwKICAgICAgICAgIF0KICAgICAgICApLAogICAgICAgIF9jKCJiciIpLAogICAgICAgIF9jKAogICAgICAgICAgImJ1dHRvbiIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiYnV0dG9uIGJ0bi1yZWciLCBhdHRyczogeyB0eXBlOiAic3VibWl0IiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCLQl9Cw0YDQtdCz0LjRgdGC0LjRgNC+0LLQsNGC0YzRgdGPIildCiAgICAgICAgKSwKICAgICAgXQogICAgKSwKICBdKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbCiAgZnVuY3Rpb24gKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJzZWN0aW9uLWhlYWRpbmciIH0sIFsKICAgICAgX2MoImgzIiwgeyBzdGF0aWNDbGFzczogImgzIiB9LCBbX3ZtLl92KCLQoNC10LPQuNGB0YLRgNCw0YbQuNGPIildKSwKICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAic2VjdGlvbi1jb250ZW50IiB9LCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiDQl9Cw0L/QvtC70L3QuNGC0LUg0YDQtdCz0LjRgdGC0YDQsNGG0LjQvtC90L3Ri9C1INC00LDQvdC90YvQtS4g0K3RgtC+INC30LDQudC80LXRgiDRgdC+0LLRgdC10Lwg0LzQsNC70L4g0LLRgNC10LzQtdC90LggIgogICAgICAgICksCiAgICAgIF0pLAogICAgXSkKICB9LApdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}